vendor_name = ModelSim
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/multi_counter.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/watch.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/alarm_watch_tester.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/Compare.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/Mux.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/Input Limiter.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/reset_logic.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/clock_gen.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/multi_counter_tester.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/bin2hex.vhd
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/FunctionalSimOneDigitCounter.vwf
source_file = 1, D:/github/DSD/ex7/multicounter_template_restored/db/multicounter.cbx.xml
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/prmtvs_b.vhd
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/prmtvs_p.vhd
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/timing_b.vhd
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/timing_p.vhd
design_name = multi_counter
instance = comp, \clk~I , clk, multi_counter, 1
instance = comp, \clk~clkctrl , clk~clkctrl, multi_counter, 1
instance = comp, \mode[0]~I , mode[0], multi_counter, 1
instance = comp, \Add0~0 , Add0~0, multi_counter, 1
instance = comp, \cnt~4 , cnt~4, multi_counter, 1
instance = comp, \reset~I , reset, multi_counter, 1
instance = comp, \reset~clkctrl , reset~clkctrl, multi_counter, 1
instance = comp, \clken~I , clken, multi_counter, 1
instance = comp, \counter_proc:cnt[3] , \counter_proc:cnt[3], multi_counter, 1
instance = comp, \LessThan0~0 , LessThan0~0, multi_counter, 1
instance = comp, \mode[1]~I , mode[1], multi_counter, 1
instance = comp, \LessThan0~1 , LessThan0~1, multi_counter, 1
instance = comp, \LessThan0~3 , LessThan0~3, multi_counter, 1
instance = comp, \cnt~3 , cnt~3, multi_counter, 1
instance = comp, \counter_proc:cnt[1] , \counter_proc:cnt[1], multi_counter, 1
instance = comp, \cnt~5 , cnt~5, multi_counter, 1
instance = comp, \counter_proc:cnt[2] , \counter_proc:cnt[2], multi_counter, 1
instance = comp, \LessThan0~2 , LessThan0~2, multi_counter, 1
instance = comp, \cnt~2 , cnt~2, multi_counter, 1
instance = comp, \counter_proc:cnt[0] , \counter_proc:cnt[0], multi_counter, 1
instance = comp, \cout~0 , cout~0, multi_counter, 1
instance = comp, \cout~reg0 , cout~reg0, multi_counter, 1
instance = comp, \count[0]~I , count[0], multi_counter, 1
instance = comp, \count[1]~I , count[1], multi_counter, 1
instance = comp, \count[2]~I , count[2], multi_counter, 1
instance = comp, \count[3]~I , count[3], multi_counter, 1
instance = comp, \cout~I , cout, multi_counter, 1
instance = comp, \tm[0]~I , tm[0], multi_counter, 1
instance = comp, \tm[1]~I , tm[1], multi_counter, 1
instance = comp, \tm[2]~I , tm[2], multi_counter, 1
instance = comp, \tm[3]~I , tm[3], multi_counter, 1
instance = comp, \tm[4]~I , tm[4], multi_counter, 1
instance = comp, \tm[5]~I , tm[5], multi_counter, 1
instance = comp, \tm[6]~I , tm[6], multi_counter, 1
instance = comp, \tm[7]~I , tm[7], multi_counter, 1
instance = comp, \tm[8]~I , tm[8], multi_counter, 1
instance = comp, \tm[9]~I , tm[9], multi_counter, 1
instance = comp, \tm[10]~I , tm[10], multi_counter, 1
instance = comp, \tm[11]~I , tm[11], multi_counter, 1
instance = comp, \tm[12]~I , tm[12], multi_counter, 1
instance = comp, \tm[13]~I , tm[13], multi_counter, 1
instance = comp, \tm[14]~I , tm[14], multi_counter, 1
instance = comp, \tm[15]~I , tm[15], multi_counter, 1
